<?php

namespace Tests\Integration\Instance;

use App\Models\BaseData\BaseClubs;
use App\Models\BaseData\BaseCompetitions;
use App\Models\BaseData\BaseStadiums;
use App\Models\Club;
use App\Models\Competition;
use App\Models\Instance;
use App\Models\Manager;
use App\Models\Stadium;
use App\Models\User;
use App\Services\CompetitionService\CompetitionService;
use App\Services\InstanceService\CreateInstance;
use App\Services\InstanceService\InstanceData\InitialSeed;
use Carbon\Carbon;
use Database\Seeders\ClubsSeeder;
use Database\Seeders\CompetitionsSeeder;
use Database\Seeders\StadiumSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CreateInstanceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->clubId         = Club::factory()->make(['id' => 1])->id;
        $this->managerId      = Manager::factory()->make(['id' => 1])->id;
        $this->userId         = User::factory()->make(['id' => 1])->id;
    }

    /** @test */
    public function it_can_create_a_new_instance()
    {
        $instanceId = (new CreateInstance())->storeInstance($this->userId, $this->managerId, $this->clubId)->id;

        $this->assertDatabaseHas(
            'instances',
            [
                'id'         => $instanceId,
                'club_id'    => $this->clubId,
                'user_id'    => $this->userId,
                'manager_id' => $this->managerId,
            ]
        );
    }

    /** @test */
    public function it_can_create_a_season()
    {
        $firstSeasonStartDate = Carbon::create((int)date("Y"), 8, 15);
        $firstSeasonEndDate   = $firstSeasonStartDate->copy()->add('1 year');
        $instanceId           = Instance::factory()->make(['id' => 1])->id;

        (new CreateInstance())->startFirstSeason($instanceId);

        $this->assertDatabaseHas(
            'seasons',
            [
                'id'         => $instanceId,
                'start_date' => $firstSeasonStartDate->format('Y-m-d'),
                'end_date'   => $firstSeasonEndDate->format('Y-m-d'),
            ]
        );
    }

    /** @test */
    public function it_can_copy_base_data()
    {
        (new ClubsSeeder)->run();
        (new StadiumSeeder)->run();
        (new CompetitionsSeeder)->run();
        $instance = Instance::factory()->make(['id' => 1]);

        $initialSeed = new InitialSeed();
        $initialSeed->seedFromBaseTables($instance->id);

        $baseCompetitionsCount = BaseCompetitions::all()->count();
        $competitions          = Competition::all();
        $baseStadiumsCount     = BaseStadiums::all()->count();
        $stadiums              = Stadium::all();
        $baseClubsCount        = BaseClubs::all()->count();
        $clubs                 = Club::all();

        $this->assertEquals($baseCompetitionsCount, $competitions->count());
        $this->assertEquals($baseStadiumsCount, $stadiums->count());
        $this->assertEquals($baseClubsCount, $clubs->count());

        $this->assertDatabaseHas('clubs',
                                 [
                                     'name'        => $clubs[0]->name,
                                     'instance_id' => $instance->id,
                                 ]
        );

        $this->assertDatabaseHas('stadiums',
                                 [
                                     'name'        => $stadiums[0]->name,
                                     'instance_id' => $instance->id,
                                 ]
        );

        $this->assertDatabaseHas('competitions',
                                 [
                                     'name'        => $competitions[0]->name,
                                     'instance_id' => $instance->id,
                                 ]
        );
    }

    /** @test */
    public function it_can_set_competitions_first_season()
    {
        $competitionServiceMock = $this->createMock(CompetitionService::class);
        $createInstance = new CreateInstance();

        $competitionServiceMock->method('getAllCompetitions')
                               ->willReturn(
                                   [
                                       (object)['type' => 'league', 'id' => 1, 'groups' => null],
                                       (object)['type' => 'tournament', 'id' => 2, 'groups' => true],
                                       (object)['type' => 'tournament', 'id' => 3, 'groups' => false],
                                   ]
                               );

        (new ClubsSeeder)->run();
        $clubs = BaseClubs::all()->where('competition_id', 1);



        $competitionServiceMock->expects($this->once())->method('makeLeague')->with($clubs->pluck('id')->toArray(), 1, 1, 1);

        $createInstance->setCompetitionsForTheFirstSeason($competitionServiceMock, 1, 1);
    }

    /** @test */
    public function it_can_assing_players_to_clubs()
    {
        $instance = Instance::factory()->make(['id' => 1]);

        (new ClubsSeeder)->run();
        $initialSeed = new InitialSeed();
        $initialSeed->seedClubsFromBaseTable($instance->id);

        $clubs = Club::all();
        dd(count($clubs));
    }
}
